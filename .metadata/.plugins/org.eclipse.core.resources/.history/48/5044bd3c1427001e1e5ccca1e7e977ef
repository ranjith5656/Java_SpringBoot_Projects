package com.bookstore.inventory.dto;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.bookstore.inventory.entity.Order;

import java.util.List;

@Repository
public class OrderDAOImpl implements OrderDAO {

    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public OrderDAOImpl(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public List<Order> getAllOrders() {
        String sql = "SELECT * FROM orders";
        return jdbcTemplate.query(sql, new BeanPropertyRowMapper<>(Order.class));
    }

    @Override
    public Order getOrderById(Long id) {
        String sql = "SELECT * FROM orders WHERE id = ?";
        return jdbcTemplate.queryForObject(sql, new Object[]{id}, new BeanPropertyRowMapper<>(Order.class));
    }

    @Override
    public void addOrder(Order order) {
        String insertOrderSql = "INSERT INTO orders (order_date, customer_id) VALUES (?, ?)";
        jdbcTemplate.update(insertOrderSql, order.getOrderDate(), order.getCustomerId());

        // Get the ID of the last inserted order
        Long orderId = jdbcTemplate.queryForObject("SELECT LAST_INSERT_ID()", Long.class);

        // Insert order items (books) into the order_items table
        String insertOrderItemsSql = "INSERT INTO order_items (order_id, book_id, quantity) VALUES (?, ?, ?)";
        for (Book book : order.getBooks()) {
            jdbcTemplate.update(insertOrderItemsSql, orderId, book.getId(), book.getQuantity());
        }
    }

    @Override
    public void updateOrder(Order order) {
        String updateOrderSql = "UPDATE orders SET order_date = ?, customer_id = ? WHERE id = ?";
        jdbcTemplate.update(updateOrderSql, order.getOrderDate(), order.getCustomerId(), order.getId());

        // Delete existing order items for the order
        String deleteOrderItemsSql = "DELETE FROM order_items WHERE order_id = ?";
        jdbcTemplate.update(deleteOrderItemsSql, order.getId());

        // Insert updated order items (books) into the order_items table
        String insertOrderItemsSql = "INSERT INTO order_items (order_id, book_id, quantity) VALUES (?, ?, ?)";
        for (Book book : order.getBooks()) {
            jdbcTemplate.update(insertOrderItemsSql, order.getId(), book.getId(), book.getQuantity());
        }
    }

    @Override
    public void deleteOrder(Long id) {
        // Delete order items associated with the order
        String deleteOrderItemsSql = "DELETE FROM order_items WHERE order_id = ?";
        jdbcTemplate.update(deleteOrderItemsSql, id);

        // Delete the order
        String deleteOrderSql = "DELETE FROM orders WHERE id = ?";
        jdbcTemplate.update(deleteOrderSql, id);
    }
}
